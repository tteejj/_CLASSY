# ==============================================================================
# PMC Terminal v5 - Unified Class-Based Application Entry Point
# ==============================================================================

# Set strict mode for the entire application session
Set-StrictMode -Version Latest
$ErrorActionPreference = "Stop"

# Establish the application's root directory
$script:ScriptRoot = Split-Path -Parent $MyInvocation.MyCommand.Path

# --- Main Execution Block ---
try {
    # 1. PRE-FLIGHT: Load and initialize essential utilities first.
    # This ensures logging and error handling are available for the entire startup process.
    Import-Module "$script:ScriptRoot\modules\logger.psm1" -Force
    Import-Module "$script:ScriptRoot\utilities\error-handling.psm1" -Force
    Initialize-Logger -Level "Debug"

    # 2. LOAD CORE MODULES AND CLASSES
    Write-Log -Level Info -Message "Loading application modules..." -Component "Startup"
    
    # These modules provide foundational classes and functional systems.
    # Order is critical for dependencies.
    Import-Module "$script:ScriptRoot\modules\event-system.psm1" -Force
    Import-Module "$script:ScriptRoot\models.psm1" -Force # Use the superior models file
    Import-Module "$script:ScriptRoot\modules\data-manager.psm1" -Force
    Import-Module "$script:ScriptRoot\modules\theme-manager.psm1" -Force
    Import-Module "$script:ScriptRoot\modules\tui-engine-v2.psm1" -Force
    Import-Module "$script:ScriptRoot\modules\tui-framework.psm1" -Force
    Import-Module "$script:ScriptRoot\modules\dialog-system.psm1" -Force
    
    # 3. LOAD SERVICE CLASSES
    # These define the application's business logic layer.
    Import-Module "$script:ScriptRoot\services\keybinding-service-class.psm1" -Force
    Import-Module "$script:ScriptRoot\services\navigation-service-class.psm1" -Force
    Import-Module "$script:ScriptRoot\services\screen-factory.psm1" -Force
    
    # 4. LOAD UI CLASS DEFINITIONS
    # Base classes for all UI elements.
    Import-Module "$script:ScriptRoot\components\ui-classes.psm1" -Force
    Import-Module "$script:ScriptRoot\components\panel-classes.psm1" -Force
    Import-Module "$script:ScriptRoot\components\table-class.psm1" -Force

    # 5. INITIALIZE CORE SYSTEMS
    Write-Log -Level Info -Message "Initializing core systems..." -Component "Startup"
    Initialize-EventSystem
    Initialize-ThemeManager
    Initialize-TuiFramework
    Initialize-DialogSystem
    
    # 6. INITIALIZE AND ASSEMBLE SERVICES
    Write-Log -Level Info -Message "Assembling services..." -Component "Startup"
    $global:Services = @{}
    $global:Services.DataManager = [DataManager]::new()
    $global:Services.KeybindingService = [KeybindingService]::new()
    $global:Services.Navigation = [NavigationService]::new($global:Services)
    
    # Load data after services are ready
    $global:Services.DataManager.LoadData()

    # 7. LOAD TUI ENGINE (This must happen before rendering starts)
    Write-Log -Level Info -Message "Initializing TUI Engine..." -Component "Startup"
    Initialize-TuiEngine

    # 8. NAVIGATE TO INITIAL SCREEN
    Write-Log -Level Info -Message "Navigating to initial screen..." -Component "Startup"
    $initialScreen = $global:Services.Navigation.ScreenFactory.CreateScreen("DashboardScreen")
    $global:Services.Navigation.PushScreen("DashboardScreen")

    # 9. START THE APPLICATION MAIN LOOP
    Write-Log -Level Info -Message "Starting TUI main loop." -Component "Startup"
    Start-TuiLoop -InitialScreen $initialScreen

}
catch {
    # This is the final safety net for any unhandled exception during startup.
    $errorMessage = "A fatal, unhandled exception occurred during application startup: $($_.Exception.Message)"
    Write-Host "`n$errorMessage" -ForegroundColor Red
    Write-Host $_.ScriptStackTrace -ForegroundColor Gray
    
    # Try to log the final error
    if (Get-Command Write-Log -ErrorAction SilentlyContinue) {
        Write-Log -Level Critical -Message $errorMessage -Data @{ Exception = $_.Exception; StackTrace = $_.ScriptStackTrace } -Force
    }
    
    Read-Host "`nPress Enter to exit."
    exit 1
}
finally {
    # Final cleanup actions
    Write-Log -Level Info -Message "Application shutting down." -Component "Shutdown"
    
    if ($global:Services -and $global:Services.DataManager) {
        try {
            $global:Services.DataManager.SaveData()
            Write-Log -Level Info -Message "Data saved successfully." -Component "Shutdown"
        }
        catch {
            Write-Warning "Failed to save data on exit: $_"
        }
    }
}